# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: deploy

on:
    push:
        branches: [develop]
    pull_request:
        branches: [develop]

jobs:
    build:
        runs-on: ubuntu-22.04

        strategy:
            matrix:
                node-version: [18.16.0]
                # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

        steps:
            - name: Checkout source code. #CI서버로 내려받은 후 특정 브랜치로 전환
              uses: actions/checkout@v3

            - name: Use Node.js ${{ matrix.node-version }} #노드 버전에 맞게 설치
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Check Npm -v
              run: npm -v

            - name: Set Secrets to Env
              run: |
                  echo "API_LIMIT_SECOND: ${{ secrets.API_LIMIT_SECOND }}" >> .env
                  echo "API_LIMIT_TIMES: ${{ secrets.API_LIMIT_TIMES }}" >> .env
                  echo "AUTH_QUERY_SECRET_KEY: ${{ secrets.AUTH_QUERY_SECRET_KEY }}" >> .env
                  echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
                  echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
                  echo "COMMON_FILE_URL: ${{ secrets.COMMON_FILE_URL }}" >> .env
                  echo "COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}" >> .env
                  echo "DEFAULT_PROFILE_IMAGE: ${{ secrets.DEFAULT_PROFILE_IMAGE }}" >> .env
                  echo "EMAIL_AUTH_DOMAIN: ${{ secrets.EMAIL_AUTH_DOMAIN }}" >> .env
                  echo "JWT_ACCESS_TOKEN_EXPIRESIN: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRESIN }}" >> .env
                  echo "JWT_REFRESH_TOKEN_EXPIRESIN: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRESIN }}" >> .env
                  echo "JWT_SECRET: ${{ secrets.JWT_SECRET }}" >> .env
                  echo "JWT_SIGN_ALGORITHM: ${{ secrets.JWT_SIGN_ALGORITHM }}" >> .env
                  echo "MONGODB_IP: ${{ secrets.MONGODB_IP }}" >> .env
                  echo "PASSWORD_SALT_OR_ROUNDS: ${{ secrets.PASSWORD_SALT_OR_ROUNDS }}" >> .env
                  echo "RDS_HOST: ${{ secrets.RDS_HOST }}" >> .env
                  echo "RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}" >> .env
                  echo "RDS_USERNAME: ${{ secrets.RDS_USERNAME }}" >> .env
                  echo "REDIS_PORT: ${{ secrets.REDIS_PORT }}" >> .env
                  echo "S3_BUCKET: ${{ secrets.S3_BUCKET }}" >> .env
                  echo "S3_REGION: ${{ secrets.S3_REGION }}" >> .env
                  echo "SES_AWS_ACCESS_KEY: ${{ secrets.SES_AWS_ACCESS_KEY }}" >> .env
                  echo "SES_AWS_ACCESS_KEY_ID: ${{ secrets.SES_AWS_ACCESS_KEY_ID }}" >> .env
                  echo "SMU_STUDENT_EMAIL_DOMAIN: ${{ secrets.SMU_STUDENT_EMAIL_DOMAIN }}" >> .env
                  echo "LOST_BOARD_INDEX: ${{ secrets.LOST_BOARD_INDEX }}" >> .env
                  echo "SENTRY_DSN: ${{ secrets.SENTRY_DSN }}" >> .env
                  echo "SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}" >> .env
                  echo "SLACK_ERROR_CHANNEL: ${{ secrets.SLACK_ERROR_CHANNEL }}" >> .env
                  echo "SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}" >> .env
                  echo "MANAGEMENT_PAGE: ${{ secrets.MANAGEMENT_PAGE }}" >> .env
                  echo "POST_BASE_URL: ${{ secrets.POST_BASE_URL }}" >> .env
                  echo "SLACK_REPORT_CHANNEL: ${{ secrets.SLACK_REPORT_CHANNEL }}" >> .env
                  echo "SLACK_CERTIFICATION_CHANNEL: ${{ secrets.SLACK_CERTIFICATION_CHANNEL }}" >> .env
                  echo "SLACK_CRITICAL_POINT_REPORTS: ${{ secrets.CRITICAL_POINT_REPORTS  }}" >> .env
                  echo "MIXPANEL_PROJECT_TOKEN: ${{ secrets.MIXPANEL_PROJECT_TOKEN  }}" >> .env
                  
            - name: Check .env file
              run: cat .env

            - name: dependency #필요한 dependency들을 설치하고 빌드
              working-directory: ./
              run: |
                  npm i

            - name: zip file
              run: zip -r smus.zip ../be-nodejs

            - name: AWS configure credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ap-northeast-2

            - name: upload to S3
              run: aws s3 cp --region ap-northeast-2 ./smus.zip s3://smus/BE/

            - name: deploy with AWS codeDeploy
              run: aws deploy create-deployment
                  --application-name test-deploy
                  --deployment-config-name CodeDeployDefault.OneAtATime
                  --deployment-group-name smus-dg
                  --s3-location bucket=smus,bundleType=zip,key=BE/smus.zip
